- hosts: Docker
  gather_facts: True
  #become: yes
  tasks:
    - name: Install nginx.
      # the 'package' module is new, and abstracts things like 'yum' 'apt,' and 'pkg' away
      package: name={{ item }} state=present
      # iterates over items
      with_items:
        - nginx
        # superfluous, should be split into a separate playbook
        #- vim
        - nano
        - sshguard
        - curl

    - name: Create website directory
      file: path=/var/www/mywebsite state=directory mode=0755

    - name: Copy nginx config files (main config and vhost config)
      # copy FROM ansible controller to target machine (fetch is the opposite)
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      # more complex iteration: each item now has src: and dest: attributes
      with_items:
        - src: "config/nginx.conf"
          dest: "/etc/nginx/nginx.conf"
        - src: "config/mywebsite.conf"
          dest: "/etc/nginx/conf.d/mywebsite.conf"
        - src: "config/index.html"
          dest: "/var/www/mywebsite/index.html"

    - name: Check if default nginx vhost still exists
      stat: path=/etc/nginx/sites-enabled/default
      register: default_conf

    - name: Remove default nginx vhost configuration
      file: path=/etc/nginx/sites-enabled/default state=absent
      when: default_conf.stat.exists

    - name: Start nginx at boot + make sure it's running right now.
      service: name=nginx state=restarted enabled=yes

    - name: try ping cmnd
      ping:

    - name: test loop
      shell: echo {{ item }}
      with_items:
        - test1234
        - test1234
        - dev1234
    - block:
      - name: List root
        command: "ls /"

      - name: This will fail
        command: "ls /nonexistent/directory"

      rescue:
        - name: Only run when a task inside the block throws an error.
          debug: msg="Something went wrong."

      always:
        - name: Always run.
          debug: msg="Regardless of what happened above, we're done with this block!"

    - name: A simple debug statement
      debug: msg="Test debugging"

    - name: test uptime and Register
      shell: /usr/bin/uptime
      register: myuptime

    - name: debug uptime
      debug: var=myuptime.rc

    # - name: debug verbose1
    #   debug: var=myuptime verbosity=1
    #
    # - name: debug verbose1
    #   debug: var=myuptime verbosity=2


    ## Register
    - stat: path=/home/mattermost/mattermost_app
      register: mattermost_install

    - shell: whoami
      register: user_name

    - name: Debug user_name
      debug: var=user_name

    - name: Debug mattermost_install
      debug: var=mattermost_install

    - name: Debug user_name.stdout
      debug: msg="{{ user_name.stdout }}"

    - name: Debug user_name.stderr
      debug: msg="{{ user_name.stderr }}"

    - name: Debug mattermost_install.stat.exists
      debug: msg="{{ mattermost_install.stat.exists }}"



    ## changed_when and failed_when -- controlling when tasks show as "changed" or "failed."
    - command: "apt-get upgrade -y"
      register: apt_upgrade
      changed_when: "'1 upgraded, 0 newly installed' in apt_upgrade.stdout"
      # changed_when: "'Processing' in apt_upgrade.stdout"
    - name: debug apt-upgraded
      debug: var=apt_upgrade

    - command: "ls /some/nonexistent/dir"
      register: mylisting
      failed_when: "'foo' not in mylisting.stderr"


    ## The 'defined' keyword
    - name: Check if a variable is defined
      debug: msg="Yes, myvariable is defined."
      when: myvariable is defined
